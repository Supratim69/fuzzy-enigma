// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  emailVerified  Boolean   @default(false) @map("email_verified")
  image          String?
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Legacy fields (keeping for backward compatibility)
  authProvider   String?   @map("auth_provider")
  avatarUrl      String?   @map("avatar_url")
  dietPreference String?   @map("diet_preference")

  // Relations
  favorites      Favorite[]
  accounts       Account[]
  sessions       Session[]

  @@index([email])
  @@map("users")
}

model Recipe {
  id            String    @id @default(uuid()) @db.Uuid
  parentId      String?   @map("parent_id") // Original CSV identifier for backwards compatibility
  title         String    @db.VarChar(500)
  ingredients   String?   @db.Text
  instructions  String?   @db.Text
  tags          String?   @db.VarChar(500)
  cuisine       String?   @db.VarChar(100)
  course        String?   @db.VarChar(100)
  diet          String?   @db.VarChar(100)
  imageUrl      String?   @map("image_url") @db.Text
  recipeUrl     String?   @map("recipe_url") @db.Text
  prepTimeMins  Int?      @map("prep_time_mins")
  cookTimeMins  Int?      @map("cook_time_mins")
  servings      Int?
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  favorites     Favorite[]

  @@index([parentId])
  @@index([title])
  @@index([cuisine])
  @@index([diet])
  @@map("recipes")
}

model Favorite {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  recipeId    String    @map("recipe_id") @db.Uuid
  dateSaved   DateTime  @default(now()) @map("date_saved") @db.Timestamptz
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe      Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId, deletedAt])
  @@index([userId])
  @@index([recipeId])
  @@index([deletedAt])
  @@index([userId, deletedAt])
  @@map("favorites")
}

model Account {
  id                String  @id @default(cuid())
  accountId         String  @map("account_id")
  providerId        String  @map("provider_id")
  userId            String  @map("user_id")
  accessToken       String? @map("access_token")
  refreshToken      String? @map("refresh_token")
  idToken           String? @map("id_token")
  accessTokenExpiresAt DateTime? @map("access_token_expires_at") @db.Timestamptz
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at") @db.Timestamptz
  scope             String?
  password          String?
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime @updatedAt @map("updated_at") @db.Timestamptz

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime @map("expires_at") @db.Timestamptz
  token     String   @unique
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  userId    String   @map("user_id")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime @map("expires_at") @db.Timestamptz
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz

  @@unique([identifier, value])
  @@map("verifications")
}